scalar DateTime

type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    first: Int
    orderBy: FlowerOrderByInput
  ): Feed!
}

enum FlowerOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  flowers: [Flower!]!
  count: Int!
}

type Mutation {
  post(
    name: String!
    color: String!
    location: String!
    description: String!
    img: String
  ): Flower!
  signup(
    email: String!
    password: String!
    name: String!
    homeState: String
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(flowerId: ID!): Vote!
}

type Subscription {
  newFlower: Flower
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  flowers: [Flower!]!
}

type Flower {
  id: ID!
  createdAt: DateTime!
  name: String!
  color: String!
  location: String!
  description: String!
  img: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  flower: Flower!
  user: User!
}
